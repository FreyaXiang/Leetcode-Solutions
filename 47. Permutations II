import java.util.*;
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> solution=new ArrayList<>();
        Arrays.sort(nums);
        backtrack(solution, new ArrayList<>(), nums, new boolean[nums.length]);
        return solution;
    }
    
    public static void backtrack(List<List<Integer>> solution, List<Integer> tempList, int[] nums, boolean[] used) {
        if (tempList.size()==nums.length) {
            solution.add(new ArrayList<>(tempList));
        } else {
            for (int i=0; i<nums.length; i++) {
                if (used[i] || i>0 && nums[i]==nums[i-1] && !used[i-1]) continue;
                tempList.add(nums[i]);
                used[i]=true;
                backtrack(solution, tempList, nums, used);
                used[i]=false;
                tempList.remove(tempList.size()-1);
            }
        }
    }
}
