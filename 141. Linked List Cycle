/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
import java.util.*;
public class Solution {
    public boolean hasCycle(ListNode head) {
        // Method 2: two pointers O(n) O(1)
        ListNode fast=head;
        ListNode slow=head;
        while (fast!=null && fast.next!=null) {
            fast=fast.next.next;
            slow=slow.next;
            if (fast==slow) {
                return true;
            }
        }
        return false;
        
        /*
        // Method 1: hash set O(n) O(n)
        ListNode current=head;
        HashSet<ListNode> seen=new HashSet<>();
        while (current!=null) {
            if (seen.contains(current)) {
                return true;
            }
            seen.add(current);
            current=current.next;  
        }
        return false; */
        
    }
}
