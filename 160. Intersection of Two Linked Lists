/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
import java.util.*;
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        HashSet<ListNode> seen=new HashSet<>();
        for (ListNode i=headA; i!=null; i=i.next) {
            seen.add(i);
        }
        
        for (ListNode j=headB; j!=null; j=j.next) {
            if (seen.contains(j)) return j;
        }
        return null;
        
        
        /* Method 2: Two pointers
        ListNode i=headA, j=headB;
        while (i!=j) {
            i= i==null? headB:i.next;
            j= j==null? headA:j.next;
        }
        return i;  */
        
        /* Method 1: Brute Force Method
        for (ListNode i=headA; i!=null; i=i.next) {
            for (ListNode j=headB; j!=null; j=j.next) {
                if (i==j) {
                    return i;
                }
            }
        }
        return null;  */
        
        
        
    }
}
