class Solution {
    public int maxArea(int[] height) {
        // Method 2: one pass
        // begin and end pointer
        int begin=0;
        int end=height.length-1;
        int maxArea=0;
        while (begin<end) {
            // find the shorter one
            maxArea=Math.max(maxArea, (end-begin)*Math.min(height[begin],height[end]));
            if (height[begin]<height[end]) {
                begin++;
            } else {
                end--;
            }
        }
        return maxArea;
        
        /*
        // Method 1: brute force O(n^2) O(n)
        int maxArea=0;
        for (int i=0; i<height.length-1; i++) {
            for (int j=i+1; j<height.length; j++) {
                maxArea=Math.max(maxArea, (j-i)*Math.min(height[i],height[j]);)
            }
        }
        return maxArea;  */
    }
}
