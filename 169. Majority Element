import java.util.*;
class Solution {
    public int majorityElement(int[] nums) {
        /*
        // Method 1: brute force 
        // O(n^2) O(1)
        int majNum=0;
        for (int i=0 ;i<nums.length; i++) {
            int count=0;
            for (int j=0; j<nums.length; j++) {
                if (nums[i]==nums[j]) count++;
            }
            if (count>nums.length/2) return nums[i];
        }
        return -1; // no majority elements */
        
        /*// Method 2: HashMap
        // O(n) O(n)
        HashMap<Integer, Integer> counted=new HashMap<>();
        for (int num : nums) {
            if (!counted.containsKey(num)) {
                counted.put(num, 1);
            } else {
                counted.put(num, counted.get(num)+1);
            }
        }
        int majNum=nums[0];
        for (Map.Entry<Integer, Integer> entry : counted.entrySet()) {
            if (entry.getValue()>counted.get(majNum)) {
                majNum=entry.getKey();
            }
        }
        return majNum; 
        
        // HashMap-Optimized
        HashMap<Integer, Integer> counted=new HashMap<>();
        for (int num : nums) {
            if (!counted.containsKey(num)) {
                counted.put(num, 1);
            } else {
                counted.put(num, counted.get(num)+1);
                if (counted.get(num)>nums.length/2) {
                    return num;
                }
            }
        }
        return -1; // not found */
        
        /*
        // Method 3: sorting 
        // O(nlgn) O(1)
        Arrays.sort(nums);
        return nums[nums.length/2]; */
        
        // Method 4: Boyer-Moore Voting Algorithm
        // O(n) O(1)
        int count = 0;
        Integer candidate = null;

        for (int num : nums) {
            if (count == 0) {
                candidate = num;
            }
            count += (num == candidate) ? 1 : -1;
        }

        return candidate;
    }
}
