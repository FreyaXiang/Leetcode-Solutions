import java.util.*;
class Solution {
    public int[] twoSum(int[] nums, int target) {
        // Method 3: one pass hash table
        HashMap<Integer,Integer> seen=new HashMap<>();
        for (int i=0; i<nums.length; i++) {
            int complement=target-nums[i];
            if (seen.containsKey(complement)) {
                return new int[] {seen.get(complement),i};
            } else {
                seen.put(nums[i],i);
            }
        }
        throw new IllegalArgumentException("No two sum numbers");
        
        /*
        // Method 2: two pass hash table
        HashMap<Integer, Integer> seen=new HashMap<>();
        for (int i=0; i<nums.length; i++) {
            seen.put(nums[i],i);
        }
        for (int i=0; i<nums.length; i++) {
            int complement=target-nums[i];
            if (seen.containsKey(complement) && seen.get(complement)!=i) {
                return new int[] {i,seen.get(complement)};
            }
        }
        throw new IllegalArgumentException("No two sum numbers");
        
        
        // Method 1: brute force O(n^2)
        for (int i=0; i<nums.length-1; i++) {
            for (int j=i+1; j<nums.length; j++) {
                if (nums[i]+nums[j]==target) {
                    return new int[] {i,j};
                }
            }
        }
        throw new IllegalArgumentException("No two sum numbers");  */ 
    }
}
